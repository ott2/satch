p wcnf <var> <clauses> 10000

c given n : int
c letting vertices be domain int(1..n)
c given E : set of set (size 2) of vertices
c letting V be toSet([u | u : vertices])
c edge {1,2} is represented by variable ?

c find W : set of vertices
c find C : set of vertices
c i in C is represented by literal  i (1..n)
c i in W is represented by literal -i (1..n)
c such that
c     C union W = V
c   , C intersect W = {}

c find connected : bool
c literal n+1 represents the Boolean "connected"

c i means "i in C"
c such that
c   , forAll e in E . min(e) in C <-> max(e) in C
c 1 <-> 2
c 1 <-> 3
c ...
c n-1 <-> n

c precisely when {1,2} is in E, we add the following two clauses:
c more general would be a quadratic number of such clauses, controlled by a quadratic number of entries from the adjacency matrix
c 1 <-> 2
c 1 <- 2
1 -2 0
c 1 -> 2
-1 2 0

c such that
c   , 1 in C
10000 1 0

c such that
c   , connected = (|C| = |V|)
c 1 AND 2 AND 3 ... n <-> connected
c 1 AND 2 AND 3 ... n <-> n+1

c 1 AND 2 AND 3 ... n -> n+1
c 1 2 3 ... n n+1
10000 1 2 3 ... n n+1 0

c 1 AND 2 AND 3 ... n <- n+1
c -(n+1) 1
c -(n+1) 2
c ...
c -(n+1) n
10000 -1 -2 ... -n 0
10000 1 -(n+1) 0
10000 2 -(n+1) 0
10000 n -(n+1) 0

c maximising |W|
c we have weighted clauses for maximising |W|:
1 -1 0
1 -2 0
...
1 -n 0

