#!/usr/bin/env perl -w
# random graph: generate a pseudorandom graph

use 5.014;  # so srand returns the seed
use Getopt::Long;

sub u {
  my $k = shift;
  # generate a number uniformly at random from 1..k
  return 1 + int(rand($k));
}

my $seed = srand();
my $help;
my $defaultn = 10;
my $n = $defaultn;
my $c = -log(log(2)); # approximate Pr[connected] = 50%
GetOptions(
  'help' => \$help,
  'seed=i' => \$seed,
  'n=i' => \$n,
) or die("Unknown commandline option\n");
if ($help) {
  print "Usage: $0 [-h] [-s|--seed <int>] [-n <int>]\n";
  print "n: number of vertices (default=$defaultn)\n";
  exit 0;
}
srand($seed);

my $steps = int($n * 0.5 * (log($n) + $c) + rand(0.5));
print "\$ generated by rg.pl with seed $seed\n";
print "letting n be $n\n";
print "\$ $steps edges\n";

# generate edges uniformly at random without replacement
# inefficient in the worst case since it just tries again on conflict
my %E;
while ($steps--) {
  my ($u,$v);
  do {
    $u = u($n);
    $v = u($n);
    ($u,$v) = $u<=$v ? ($u,$v) : ($v,$u);
  } while ($u == $v) or $E{"$u,$v"};
  $E{"$u,$v"} = 1;
}
print 'letting E be {';
my $SEP = '';
for my $e (sort keys %E) {
  print $SEP, "{$e}";
  $SEP = ',';
}
print "}\n";
